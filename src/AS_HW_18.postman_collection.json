{
	"info": {
		"_postman_id": "782517a6-fa01-445a-9117-82237a8cbbf0",
		"name": "Anita Smyshlyaeva HW 18",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29495458"
	},
	"item": [
		{
			"name": "lecture-1",
			"item": [
				{
					"name": "REGISTRATION",
					"item": [
						{
							"name": "Happy Path",
							"item": [
								{
									"name": "Admin's Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"token1\", jsonData.accessToken);\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response has the required field - accessToken', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.accessToken).to.exist;\r",
													"})\r",
													"\r",
													"pm.test('accessToken is a non-empty string', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
													"})\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})\r",
													"\r",
													"pm.test('Validate accessToken is a valid JWT token', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
													"});",
													"",
													"pm.test(\"First name and last name are non-empty strings\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
													"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
													"});",
													"",
													"pm.test(\"Role is a valid integer value\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.role).to.exist.and.to.be.a('number');",
													"});",
													"",
													"pm.test(\"All the properties are displayed\", function () {",
													"    // Define a list of needed field names",
													"    const neededFields = ['id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt'];",
													"",
													"    // Get the response data from the actual response",
													"    const responseData = pm.response.json();",
													"",
													"    // Check if each needed field is present in the response",
													"    neededFields.forEach(field => {",
													"        pm.expect(responseData).to.have.property(field);",
													"    });",
													"});",
													"",
													"pm.test(\"Check if role is 1\", function () {",
													"    const responseRole = pm.response.json().role; ",
													"    pm.expect(responseRole).to.equal(1); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 9;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.variables.set(\"adminUsername\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{adminUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"admin\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Teacher registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
													"});",
													"",
													"pm.test(\"First name and last name are non-empty strings\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
													"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
													"});",
													"",
													"pm.test(\"Role is a valid integer value\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.role).to.exist.and.to.be.a('number');",
													"});",
													"",
													"pm.test(\"All the properties are displayed\", function () {",
													"    // Define a list of needed field names",
													"    const neededFields = ['id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt'];",
													"",
													"    const responseData = pm.response.json();",
													"",
													"    // Check if each needed field is present in the response",
													"    neededFields.forEach(field => {",
													"        pm.expect(responseData).to.have.property(field);",
													"    });",
													"});",
													"",
													"pm.test(\"Check if role is 2\", function () {",
													"    const responseRole = pm.response.json().role; ",
													"    pm.expect(responseRole).to.equal(2); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 9;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.collectionVariables.set(\"teacherUsername\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set(\"teacherPassword\", \"?deadpoetssociety45!\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{teacherUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{teacherPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Teacher's token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"token2\", jsonData.accessToken);\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response has the required field - accessToken', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.accessToken).to.exist;\r",
													"})\r",
													"\r",
													"pm.test('accessToken is a non-empty string', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
													"})\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})\r",
													"\r",
													"pm.test('Validate accessToken is a valid JWT token', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{teacherUsername}}\",\r\n  \"password\": \"{{teacherPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Student registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
													"});",
													"",
													"pm.test(\"First name and last name are non-empty strings\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
													"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
													"});",
													"",
													"pm.test(\"Role is a valid integer value\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.role).to.exist.and.to.be.a('number');",
													"});",
													"",
													"pm.test(\"All the properties are displayed\", function () {",
													"    // Define a list of needed field names",
													"    const neededFields = ['id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt'];",
													"",
													"    // Get the response data from the actual response",
													"    const responseData = pm.response.json();",
													"",
													"    // Check if each needed field is present in the response",
													"    neededFields.forEach(field => {",
													"        pm.expect(responseData).to.have.property(field);",
													"    });",
													"});",
													"",
													"pm.test(\"Check if role is 3\", function () {",
													"    const responseRole = pm.response.json().role; ",
													"    pm.expect(responseRole).to.equal(3); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 9;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.collectionVariables.set(\"studentUsername\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set(\"studentPassword\", \"?sepTgh67aDF45!\"); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{studentUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{studentPassword}}\",\r\n\"role\": \"student\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Student's token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"token3\", jsonData.accessToken);\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response has the required field - accessToken', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.accessToken).to.exist;\r",
													"})\r",
													"\r",
													"pm.test('accessToken is a non-empty string', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
													"})\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})\r",
													"\r",
													"pm.test('Validate accessToken is a valid JWT token', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{studentUsername}}\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"Username\" field",
							"item": [
								{
									"name": "Above the limit Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const longUsername = 'a'.repeat(256); \r",
													"\r",
													"pm.variables.set('longUsername', longUsername);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 400\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"The errors array is present in the response\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.errors).to.exist;",
													"});",
													"",
													"pm.test(\"Each error object has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.errors).to.be.an('array');",
													"    responseData.errors.forEach(function(error) {",
													"        pm.expect(error.value).to.exist.and.to.be.a('string');",
													"        pm.expect(error.msg).to.exist.and.to.be.a('string');",
													"        pm.expect(error.param).to.exist.and.to.be.a('string');",
													"        pm.expect(error.location).to.exist.and.to.be.a('string');",
													"    });",
													"});",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{longUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}!\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Below the limit Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const shortUsername = 'a'.repeat(2); \r",
													"\r",
													"pm.variables.set('shortUsername', shortUsername);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 400\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"The errors array is present in the response\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.errors).to.exist;",
													"});",
													"",
													"pm.test(\"Each error object has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.errors).to.be.an('array');",
													"    responseData.errors.forEach(function(error) {",
													"        pm.expect(error.value).to.exist.and.to.be.a('string');",
													"        pm.expect(error.msg).to.exist.and.to.be.a('string');",
													"        pm.expect(error.param).to.exist.and.to.be.a('string');",
													"        pm.expect(error.location).to.exist.and.to.be.a('string');",
													"    });",
													"});",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{shortUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "3-character Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 3;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.variables.set(\"Username\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"The username field is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{Username}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "4-character Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 4;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.variables.set(\"Username\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The username field is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{Username}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "254-character Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 254;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.variables.set(\"Username\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Username is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{Username}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "255-character Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const maxUsernameLength = 255;\r",
													"const randomUsername = getRandomString(maxUsernameLength);\r",
													"\r",
													"pm.variables.set(\"Username\", randomUsername);\r",
													"\r",
													"// Function to generate a random string of specified length\r",
													"function getRandomString(length) {\r",
													"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
													"    let result = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"        result += characters.charAt(randomIndex);\r",
													"    }\r",
													"    return result;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Username is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{Username}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Username with spaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Username is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"I am Groot\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"firstName\" field",
							"item": [
								{
									"name": "Above the limit firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const longFirstName = 'a'.repeat(256); \r",
													"\r",
													"pm.variables.set('longFirstName', longFirstName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{longFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "255-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const FirstName = 'a'.repeat(255); \r",
													"\r",
													"pm.variables.set('FirstName', FirstName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{FirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "254-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const FirstName = 'a'.repeat(254); \r",
													"\r",
													"pm.variables.set('FirstName', FirstName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{FirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "1-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const letters = 'abcdefghijklmnopqrstuvwxyz'; // List of letters\r",
													"const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"\r",
													"pm.variables.set('randomLetter', randomLetter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"First name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{randomLetter}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty firstName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 400\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"The errors array is present in the response\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.errors).to.exist;",
													"});",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Boolean type of firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code when 'firstName' has an invalid type\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Check for error when 'firstName' is a boolean\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property('error');",
													"    pm.expect(responseBody.error).to.equal(\"Parameter should be a string\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\",  \r\n\"firstName\": \"{{$randomBoolean}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Numeric type of firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code when 'firstName' has an invalid type\", function () {",
													"   pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Check for error when 'firstName' is numeric\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property('error');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"12345\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"lastName\" field",
							"item": [
								{
									"name": "Above the limit lastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const longLastName = 'a'.repeat(256); \r",
													"\r",
													"pm.variables.set('longLastName', longLastName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{longLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "255-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const LastName = 'a'.repeat(255); \r",
													"\r",
													"pm.variables.set('LastName', LastName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{LastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "254-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const LastName = 'a'.repeat(254); \r",
													"\r",
													"pm.variables.set('FirstName', LastName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{LastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "1-character firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const letters = 'abcdefghijklmnopqrstuvwxyz'; // List of letters\r",
													"const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"\r",
													"pm.variables.set('randomLetter', randomLetter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Last name is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{randomLetter}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty firstName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 400\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"The errors array is present in the response\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.errors).to.exist;",
													"});",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Boolean type of firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code when 'lastName' has an invalid type\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Check for error when 'lastName' is a boolean\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property('error');",
													"    pm.expect(responseBody.error).to.equal(\"Parameter should be a string\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\",  \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomBoolean}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Numeric type of firstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code when 'lastName' has an invalid type\", function () {",
													"   pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Check for error when 'lastName' is numeric\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property('error');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"12345\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"Email\" field",
							"item": [
								{
									"name": "Email without @",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"howtoruntheworldwithpinky.com\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email without domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"howtoruntheworld@\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email without top-level domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"howtoruntheworld@withpinky\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Over the limit email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 66 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"const longEmail = `${randomString}@example.com`;\r",
													"\r",
													"pm.variables.set('longEmail', longEmail);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{longEmail}}\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "1-character email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const letters = 'abcdefghijklmnopqrstuvwxyz'; // List of letters\r",
													"const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\r",
													"\r",
													"pm.variables.set('randomLetter', randomLetter);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{randomLetter}}@{{randomLetter}}.com\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "75-character email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 63 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"const randomEmail = `${randomString}@example.com`;\r",
													"\r",
													"pm.variables.set('randomEmail', randomEmail);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Email is in a valid format\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{randomEmail}}\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "76-character email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 64 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"const randomEmail = `${randomString}@example.com`;\r",
													"\r",
													"pm.variables.set('randomEmail', randomEmail);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Email is in a valid format\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
													"});\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{randomEmail}}\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}_{{$randomColor}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"\",  \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"Password\" field",
							"item": [
								{
									"name": "Too easy password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"easypassword\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Above the limit password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 21 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "20-character password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 20 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"  pm.expect(responseData.firstName).to.exist.and.to.be.a('string');",
													"  pm.expect(responseData.lastName).to.exist.and.to.be.a('string');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "19-character password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 19 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"  pm.expect(responseData.firstName).to.exist.and.to.be.a('string');",
													"  pm.expect(responseData.lastName).to.exist.and.to.be.a('string');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Below the limit password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 7 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "8-character password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 8 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
													"  pm.expect(responseData.firstName).to.exist.and.to.be.a('string');\r",
													"  pm.expect(responseData.lastName).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "9-character password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomString = Array.from({ length: 9 }, () => {\r",
													"    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';\r",
													"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
													"    return characters.charAt(randomIndex);\r",
													"}).join('');\r",
													"\r",
													"pm.variables.set('randomPassword', randomString);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
													"  pm.expect(responseData.firstName).to.exist.and.to.be.a('string');\r",
													"  pm.expect(responseData.lastName).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{randomPassword}}\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"\", \r\n\"role\": \"teacher\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "\"Role\" field",
							"item": [
								{
									"name": "Non-existing role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"guest\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Numeric role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"The errors array is present in the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.errors).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \"username\": \"{{$randomUserName}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{$randomPassword}}\", \r\n\"role\": \"1\" }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CATEGORIES",
					"item": [
						{
							"name": "Under an admin role",
							"item": [
								{
									"name": "List of categories for admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all the properties\", () => {\r",
													"    // Parse the response JSON as an array\r",
													"    const responseArray = pm.response.json();\r",
													"    \r",
													"    // Loop through each item in the array\r",
													"    responseArray.forEach((item, index) => {\r",
													"        // Check if each item has all the properties\r",
													"        pm.expect(item).to.have.property(\"id\");\r",
													"        pm.expect(item).to.have.property(\"title\");\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});\r",
													"\r",
													"pm.test(\"Rate limiting is enforced\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 429]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a category under admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"categoryTitle\", \"Category \" + Math.floor(Math.random() * 1000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Category is successfully created\", function () {\r",
													"    pm.response.to.have.status(201); // Assuming 201 is the status code for a successful creation\r",
													"    pm.expect(pm.response.json()).to.have.property('categoryId');\r",
													"    pm.expect(pm.response.json().categoryId).to.be.a('number');\r",
													"});\r",
													"\r",
													"var requestData = pm.response.json();\r",
													"pm.collectionVariables.set(\"categoryTitle\", requestData.title);\r",
													"pm.collectionVariables.set(\"categoryID\", requestData.id);\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title', 'updatedAt', 'createdAt'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{categoryTitle}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by ID for admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Rate limiting is enforced\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 429]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a category under admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Category is successfully updated\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Updated category title matches the request\", function () {\r",
													"    const responseCategoryTitle = pm.response.json().title; \r",
													"    const requestCategoryTitle = pm.variables.get(\"categoryTitle\"); \r",
													"\r",
													"    pm.expect(responseCategoryTitle).to.equal(requestCategoryTitle);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomColor = pm.variables.replaceIn(\"{{$randomColor}}\");\r",
													"const randomNoun = pm.variables.replaceIn(\"{{$randomNoun}}\");\r",
													"const categoryTitle = randomColor + randomNoun;\r",
													"\r",
													"pm.variables.set(\"categoryTitle\", categoryTitle);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{categoryID}},\r\n    \"title\": \"{{categoryTitle}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category by ID under admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful delete response\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson.result).to.eql(\"Success: record was removed.\");\r",
													"});\r",
													"\r",
													"let deletedCourseId = pm.collectionVariables.get(\"categoryID\")\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify course deleted under admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"List of courses does not include deleted course\", function () {\r",
													"    // Get the list of courses from the response\r",
													"    let coursesList = pm.response.json();\r",
													"\r",
													"    // Retrieve the deleted course ID from collection variables\r",
													"    let deletedCourseId = pm.collectionVariables.get(\"deletedCourseId\");\r",
													"\r",
													"    // Check that the deleted course ID is not present in any course's ID in the list\r",
													"    pm.expect(coursesList.some(course => course.id === parseInt(deletedCourseId))).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-add a category (precondition for next tests)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"categoryTitle\", \"Category \" + Math.floor(Math.random() * 1000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Category is successfully created\", function () {\r",
													"    pm.response.to.have.status(201); // Assuming 201 is the status code for a successful creation\r",
													"    pm.expect(pm.response.json()).to.have.property('categoryId');\r",
													"    pm.expect(pm.response.json().categoryId).to.be.a('number');\r",
													"});\r",
													"\r",
													"var requestData = pm.response.json();\r",
													"pm.collectionVariables.set(\"categoryTitle\", requestData.title);\r",
													"pm.collectionVariables.set(\"categoryID\", requestData.id);\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title', 'updatedAt', 'createdAt'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{categoryTitle}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Under a teacher role",
							"item": [
								{
									"name": "List of categories under teacher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all the properties\", () => {\r",
													"    // Parse the response JSON as an array\r",
													"    const responseArray = pm.response.json();\r",
													"    \r",
													"    // Loop through each item in the array\r",
													"    responseArray.forEach((item, index) => {\r",
													"        // Check if each item has all the properties\r",
													"        pm.expect(item).to.have.property(\"id\");\r",
													"        pm.expect(item).to.have.property(\"title\");\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});\r",
													"\r",
													"pm.test(\"Rate limiting is enforced\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 429]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a category under teacher",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"categoryTitle\", \"Category \" + Math.floor(Math.random() * 1000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Action is forbidden for role teacher\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{categoryTitle}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by ID for teacher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a category under teacher",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomColor = pm.variables.replaceIn(\"{{$randomColor}}\");\r",
													"const randomNoun = pm.variables.replaceIn(\"{{$randomNoun}}\");\r",
													"const categoryTitle = randomColor + randomNoun;\r",
													"\r",
													"pm.variables.set(\"categoryTitle\", categoryTitle);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Action is forbidden for role teacher\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{categoryID}},\r\n    \"title\": \"{{categoryTitle}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category by ID under teacher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Action is forbidden for role teacher\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Under a student role",
							"item": [
								{
									"name": "List of categories for student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all the properties\", () => {\r",
													"    // Parse the response JSON as an array\r",
													"    const responseArray = pm.response.json();\r",
													"    \r",
													"    // Loop through each item in the array\r",
													"    responseArray.forEach((item, index) => {\r",
													"        // Check if each item has all the properties\r",
													"        pm.expect(item).to.have.property(\"id\");\r",
													"        pm.expect(item).to.have.property(\"title\");\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by ID for student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a category under student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"categoryTitle\", \"Category \" + Math.floor(Math.random() * 1000));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Action is forbidden for role student\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{categoryTitle}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a category under student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomColor = pm.variables.replaceIn(\"{{$randomColor}}\");\r",
													"const randomNoun = pm.variables.replaceIn(\"{{$randomNoun}}\");\r",
													"const categoryTitle = randomColor + randomNoun;\r",
													"\r",
													"pm.variables.set(\"categoryTitle\", categoryTitle);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Action is forbidden for role student\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{categoryID}},\r\n    \"title\": \"{{categoryTitle}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category by ID under student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Action is forbidden for role student\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"    pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "lecture-2",
			"item": [
				{
					"name": "TEACHER",
					"item": [
						{
							"name": "Add a course",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Teacher logging in",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"token2\", jsonData.accessToken);\r",
															"    \r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('Response has the required field - accessToken', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.accessToken).to.exist;\r",
															"})\r",
															"\r",
															"pm.test('accessToken is a non-empty string', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
															"})\r",
															"\r",
															"pm.test('Response time is less than 500ms', function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"})\r",
															"\r",
															"pm.test('Validate accessToken is a valid JWT token', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"username\": \"{{teacherUsername}}\",\r\n  \"password\": \"{{teacherPassword}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/session",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"session"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify new course exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"The created course is present\", function () {\r",
															"    let response = pm.response.json();\r",
															"    let savedCourseTitle = pm.collectionVariables.get(\"courseTitle\");\r",
															"    pm.expect(response.title).to.eql(savedCourseTitle);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses/{{courseID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses",
														"{{courseID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Token",
									"item": [
										{
											"name": "Add a course - wrong auth type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Response is an object with errors property\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');",
															"});",
															"",
															"pm.test(\"Response time is less than 500ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(500);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pre-request script for adding a course\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "Rwrat2GvDIRfigsHMalDfuUFXr2agZAz",
															"type": "string"
														},
														{
															"key": "key",
															"value": "myAPIKey",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - invalid token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "12345",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - student's token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pre-request script for adding a course\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token3}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - no token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pre-request script for adding a course\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Title",
									"item": [
										{
											"name": "Add a course - too long \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when exceeding the length limit\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Maximum course title length is: 100\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxTitleLength = 101;\r",
															"const randomPartLength = maxTitleLength - \"Course_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); // Generates a random part of 100 - 7 characters\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - maximum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 100;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just below the maximum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 99;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - minimum value \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 3;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - too short \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 2;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just above the minimum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 4;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - empty \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Description",
									"item": [
										{
											"name": "Add a course - too long \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when exceeding the length limit\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Maximum course description length is: 100\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 501;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDecription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDecription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - maximum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 500;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDecription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDecription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just below the maximum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 499;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDecription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDecription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - too short \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 2;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - minimum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 3;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDecription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just above the minimum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 4;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDecription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - empty \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Visible",
									"item": [
										{
											"name": "Add a course - missing body field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - numeric \"visible\" instead of boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message when using numeric instead of boolean value type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Parameter should be boolean\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pre-request script for adding a course\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": 123,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Change a course",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Teacher logging in",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"token2\", jsonData.accessToken);\r",
															"    \r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('Response has the required field - accessToken', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.accessToken).to.exist;\r",
															"})\r",
															"\r",
															"pm.test('accessToken is a non-empty string', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
															"})\r",
															"\r",
															"pm.test('Response time is less than 500ms', function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"})\r",
															"\r",
															"pm.test('Validate accessToken is a valid JWT token', function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"username\": \"{{teacherUsername}}\",\r\n  \"password\": \"{{teacherPassword}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/session",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"session"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change a course - positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Token",
									"item": [
										{
											"name": "Change a course - wrong auth type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Response is an object with errors property\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');",
															"});",
															"",
															"pm.test(\"Response time is less than 500ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(500);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "Rwrat2GvDIRfigsHMalDfuUFXr2agZAz",
															"type": "string"
														},
														{
															"key": "key",
															"value": "myAPIKey",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change a course - invalid token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "12345",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change a course - student's token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token3}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change a course - no token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Title",
									"item": [
										{
											"name": "Change a course - too long \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when exceeding the length limit\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Maximum course title length is: 100\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 101;\r",
															"const randomPartLength = maxTitleLength - \"Course_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); // Generates a random part of 100 - 7 characters\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - maximum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 100;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just below the maximum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 99;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - minimum value \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 3;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - too short \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 2;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just above the minimum \"title\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const maxCourseTitleLength = 4;\r",
															"const randomCourseTitle = getRandomString(maxCourseTitleLength);\r",
															"\r",
															"pm.variables.set(\"courseTitle\", randomCourseTitle);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - empty \"title\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Description",
									"item": [
										{
											"name": "Add a course - too long \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when exceeding the length limit\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Maximum course description length is: 500\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 501;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDescription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - maximum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 999ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 500;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDescription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just below the maximum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxTitleLength = 499;\r",
															"const randomPartLength = maxTitleLength - \"Description_\".length;\r",
															"const randomPart = \"A\".repeat(randomPartLength); \r",
															"pm.variables.set(\"courseDescription\", \"Description_\" + randomPart);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - too short \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 2;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - minimum \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 3;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - just above \"description\" length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var requestData = pm.response.json();\r",
															"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
															"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", () => {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});\r",
															"\r",
															"pm.test(\"All the properties are displayed\", function () {\r",
															"    // Define a list of needed field names\r",
															"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
															"\r",
															"    // Get the response data from the actual response\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    // Check if each needed field is present in the response\r",
															"    neededFields.forEach(field => {\r",
															"        pm.expect(responseData).to.have.property(field);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));\r",
															"\r",
															"const maxCourseDescriptionLength = 4;\r",
															"const randomCourseDescription = getRandomString(maxCourseDescriptionLength);\r",
															"\r",
															"pm.variables.set(\"courseDescription\", randomCourseDescription);\r",
															"\r",
															"// Function to generate a random string of specified length\r",
															"function getRandomString(length) {\r",
															"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
															"    let result = \"\";\r",
															"    for (let i = 0; i < length; i++) {\r",
															"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
															"        result += characters.charAt(randomIndex);\r",
															"    }\r",
															"    return result;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{courseDescription}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a course - empty \"description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message when not reaching the minimum\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Visible",
									"item": [
										{
											"name": "Change a course - missing body field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is an object with errors property\", function () {\r",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change a course - numeric \"visible\" instead of boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message when using numeric instead of boolean value type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.text()).to.include(\"Parameter should be boolean\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response time is less than 500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pre-request script for adding a course\r",
															"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token2}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": 123,\r\n  \"categoryId\": {{categoryID}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete a course",
							"item": [
								{
									"name": "Delete a course - wrong auth type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Rwrat2GvDIRfigsHMalDfuUFXr2agZAz",
													"type": "string"
												},
												{
													"key": "key",
													"value": "myAPIKey",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a course - invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "12345",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a course - student's token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a course - no token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a course - positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful delete response\", function () {\r",
													"    // Parse the response JSON\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    // Check if the response contains the expected success message\r",
													"    pm.expect(responseJson.result).to.eql(\"Success: record was removed.\");\r",
													"});\r",
													"\r",
													"let deletedCourseId = pm.collectionVariables.get(\"courseID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify course deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"List of courses does not include deleted course\", function () {\r",
													"    // Get the list of courses from the response\r",
													"    let coursesList = pm.response.json();\r",
													"\r",
													"    // Retrieve the deleted course ID from collection variables\r",
													"    let deletedCourseId = pm.collectionVariables.get(\"deletedCourseId\");\r",
													"\r",
													"    // Check that the deleted course ID is not present in any course's ID in the list\r",
													"    pm.expect(coursesList.some(course => course.id === parseInt(deletedCourseId))).to.be.false;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-add the course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var requestData = pm.response.json();\r",
													"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
													"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});\r",
													"\r",
													"pm.test(\"All the properties are displayed\", function () {\r",
													"    // Define a list of needed field names\r",
													"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible'];\r",
													"\r",
													"    // Get the response data from the actual response\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Check if each needed field is present in the response\r",
													"    neededFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request script for adding a course\r",
													"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "STUDENT",
					"item": [
						{
							"name": "Get courses list",
							"item": [
								{
									"name": "Student logs in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"token3\", jsonData.accessToken);\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response has the required field - accessToken', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.accessToken).to.exist;\r",
													"})\r",
													"\r",
													"pm.test('accessToken is a non-empty string', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
													"})\r",
													"\r",
													"pm.test('Response time is less than 500ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"})\r",
													"\r",
													"pm.test('Validate accessToken is a valid JWT token', function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{studentUsername}}\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/session",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of the courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all the properties\", () => {\r",
													"    // Parse the response JSON as an array\r",
													"    const responseArray = pm.response.json();\r",
													"    \r",
													"    // Loop through each item in the array\r",
													"    responseArray.forEach((item, index) => {\r",
													"        // Check if each item has all the properties\r",
													"        pm.expect(item).to.have.property(\"id\");\r",
													"        pm.expect(item).to.have.property(\"title\");\r",
													"        pm.expect(item).to.have.property(\"description\");\r",
													"        pm.expect(item).to.have.property(\"visible\");\r",
													"        pm.expect(item).to.have.property(\"categoryId\");\r",
													"        pm.expect(item).to.have.property(\"likes\");\r",
													"        pm.expect(item).to.have.property(\"dislikes\");\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 999ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of the courses - no token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of the courses - invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "12345",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of the courses - wrong auth type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Rwrat2GvDIRfigsHMalDfuUFXr2agZAz",
													"type": "string"
												},
												{
													"key": "key",
													"value": "myAPIKey",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get course information",
							"item": [
								{
									"name": "Get a course by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has all the properties\", () => {\r",
													"    //parse the response JSON and test all the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.have.property(\"id\");\r",
													"    pm.expect(responseJson).to.have.property(\"title\");\r",
													"    pm.expect(responseJson).to.have.property(\"description\");\r",
													"    pm.expect(responseJson).to.have.property(\"visible\");\r",
													"    pm.expect(responseJson).to.have.property(\"categoryId\");\r",
													"    pm.expect(responseJson).to.have.property(\"likes\");\r",
													"    pm.expect(responseJson).to.have.property(\"dislikes\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", () => {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a course by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('error');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token3}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/!@#",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"!@"
											],
											"hash": ""
										}
									},
									"response": []
								},
								{
									"name": "Get a course by ID - no token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a course by ID - invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "12345",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a course by ID - wrong auth type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with errors property\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('errors');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "Rwrat2GvDIRfigsHMalDfuUFXr2agZAz",
													"type": "string"
												},
												{
													"key": "key",
													"value": "myAPIKey",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "lecture-3",
			"item": [
				{
					"name": "Scenario_1_Student Registration and Course Enrollment",
					"item": [
						{
							"name": "A new user registers on the platform as a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"pm.test(\"First name and last name are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
											"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
											"});",
											"",
											"pm.test(\"Role is a valid integer value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.role).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"All the properties are displayed\", function () {",
											"    // Define a list of needed field names",
											"    const neededFields = ['id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt'];",
											"",
											"    // Get the response data from the actual response",
											"    const responseData = pm.response.json();",
											"",
											"    // Check if each needed field is present in the response",
											"    neededFields.forEach(field => {",
											"        pm.expect(responseData).to.have.property(field);",
											"    });",
											"});",
											"",
											"pm.test(\"Check if role is 3\", function () {",
											"    const responseRole = pm.response.json().role; ",
											"    pm.expect(responseRole).to.equal(3); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const maxUsernameLength = 9;\r",
											"const randomUsername = getRandomString(maxUsernameLength);\r",
											"\r",
											"pm.collectionVariables.set(\"studentUsername\", randomUsername);\r",
											"\r",
											"// Function to generate a random string of specified length\r",
											"function getRandomString(length) {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
											"    let result = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"studentPassword\", \"?sepTgh67aDF45!\"); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"username\": \"{{studentUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{studentPassword}}\",\r\n\"role\": \"student\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student logs in to access the platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"token3\", jsonData.accessToken);\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response has the required field - accessToken', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"})\r",
											"\r",
											"pm.test('accessToken is a non-empty string', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
											"})\r",
											"\r",
											"pm.test('Response time is less than 500ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"})\r",
											"\r",
											"pm.test('Validate accessToken is a valid JWT token', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{studentUsername}}\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student browses through the available courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 999ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
											"});\r",
											"\r",
											"pm.test(\"Rate limiting is enforced\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 429]);\r",
											"});\r",
											"\r",
											"// Postman Test Script\r",
											"const courses = pm.response.json(); \r",
											"\r",
											"// Generate a random index to select a course\r",
											"const randomIndex = Math.floor(Math.random() * courses.length);\r",
											"\r",
											"// Get the randomly selected course\r",
											"const randomCourse = courses[randomIndex];\r",
											"\r",
											"// Save the ID of the random course as a collection variable\r",
											"pm.collectionVariables.set('randomCourseId', randomCourse.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student chooses a course and explores information about it",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    //parse the response JSON and test all the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property(\"id\");\r",
											"    pm.expect(responseJson).to.have.property(\"title\");\r",
											"    pm.expect(responseJson).to.have.property(\"description\");\r",
											"    pm.expect(responseJson).to.have.property(\"visible\");\r",
											"    pm.expect(responseJson).to.have.property(\"categoryId\");\r",
											"    pm.expect(responseJson).to.have.property(\"likes\");\r",
											"    pm.expect(responseJson).to.have.property(\"dislikes\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{randomCourseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{randomCourseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student enrolls the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{randomCourseId}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{randomCourseId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student accesses course materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    //parse the response JSON and test all the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property(\"id\");\r",
											"    pm.expect(responseJson).to.have.property(\"title\");\r",
											"    pm.expect(responseJson).to.have.property(\"description\");\r",
											"    pm.expect(responseJson).to.have.property(\"visible\");\r",
											"    pm.expect(responseJson).to.have.property(\"categoryId\");\r",
											"    pm.expect(responseJson).to.have.property(\"likes\");\r",
											"    pm.expect(responseJson).to.have.property(\"dislikes\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{randomCourseId}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{randomCourseId}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student likes the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required field 'result'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.result).to.exist;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "courseId",
											"value": "{{randomCourseId}}",
											"type": "text"
										},
										{
											"key": "like",
											"value": "yes",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{randomCourseId}}/like/yes",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{randomCourseId}}",
										"like",
										"yes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario_2_Teacher Adding Courses and Managing Materials",
					"item": [
						{
							"name": "A new user registers as a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"pm.test(\"First name and last name are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
											"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
											"});",
											"",
											"pm.test(\"Role is a valid integer value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.role).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"All the properties are displayed\", function () {",
											"    // Define a list of needed field names",
											"    const neededFields = ['id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt'];",
											"",
											"    const responseData = pm.response.json();",
											"",
											"    // Check if each needed field is present in the response",
											"    neededFields.forEach(field => {",
											"        pm.expect(responseData).to.have.property(field);",
											"    });",
											"});",
											"",
											"pm.test(\"Check if role is 2\", function () {",
											"    const responseRole = pm.response.json().role; ",
											"    pm.expect(responseRole).to.equal(2); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const maxUsernameLength = 9;\r",
											"const randomUsername = getRandomString(maxUsernameLength);\r",
											"\r",
											"pm.collectionVariables.set(\"teacherUsername\", randomUsername);\r",
											"\r",
											"// Function to generate a random string of specified length\r",
											"function getRandomString(length) {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
											"    let result = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"teacherPassword\", \"?deadpoetssociety45!\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"username\": \"{{teacherUsername}}\", \r\n\"firstName\": \"{{$randomFirstName}}\", \r\n\"lastName\": \"{{$randomLastName}}\", \r\n\"email\": \"{{$randomExampleEmail}}\", \r\n\"password\": \"{{teacherPassword}}\", \r\n\"role\": \"teacher\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher logs in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"token2\", jsonData.accessToken);\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response has the required field - accessToken', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"})\r",
											"\r",
											"pm.test('accessToken is a non-empty string', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
											"})\r",
											"\r",
											"pm.test('Response time is less than 500ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"})\r",
											"\r",
											"pm.test('Validate accessToken is a valid JWT token', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{teacherUsername}}\",\r\n  \"password\": \"{{teacherPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher browses through the available categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    // Parse the response JSON as an array\r",
											"    const responseArray = pm.response.json();\r",
											"    \r",
											"    // Loop through each item in the array\r",
											"    responseArray.forEach((item, index) => {\r",
											"        // Check if each item has all the properties\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"title\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 999ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
											"});\r",
											"\r",
											"pm.test(\"Rate limiting is enforced\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 429]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher chooses a new category for new courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All the properties are displayed\", function () {\r",
											"    // Define a list of needed field names\r",
											"    const neededFields = ['id', 'title'];\r",
											"\r",
											"    // Get the response data from the actual response\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    // Check if each needed field is present in the response\r",
											"    neededFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{categoryID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{categoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher adds a new course within the chosen category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var requestData = pm.response.json();\r",
											"pm.collectionVariables.set(\"courseID\", requestData.id);\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"All the properties are displayed\", function () {\r",
											"    // Define a list of needed field names\r",
											"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt'];\r",
											"\r",
											"    // Get the response data from the actual response\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    // Check if each needed field is present in the response\r",
											"    neededFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"courseTitle\", \"Course_\" + Math.floor(Math.random() * 1000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{courseTitle}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{randomCategoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "The teacher adds course materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var requestData = pm.response.json();\r",
											"pm.collectionVariables.set(\"materialId\", requestData.id);\r",
											"\r",
											"pm.test(\"All the properties are displayed\", function () {\r",
											"    // Define a list of needed field names\r",
											"    const neededFields = ['id', 'title', 'updatedAt', 'createdAt'];\r",
											"\r",
											"    // Get the response data from the actual response\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    // Check if each needed field is present in the response\r",
											"    neededFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAdjective}}{{$randomMonth}}\",\r\n  \"data\": \"{{$randomProductMaterial}} {{$randomWord}}\",\r\n  \"order\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher updates course details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var requestData = pm.response.json();\r",
											"pm.collectionVariables.set(\"courseTitle\", requestData.title);\r",
											"\r",
											"pm.test(\"All the properties are displayed\", function () {\r",
											"    // Define a list of needed field names\r",
											"    const neededFields = ['id', 'title', 'categoryId', 'description', 'visible', 'likes', 'dislikes'];\r",
											"\r",
											"    // Get the response data from the actual response\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    // Check if each needed field is present in the response\r",
											"    neededFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseID}},\r\n  \"title\": \"{{$randomColor}}{{$randomNoun}}\",\r\n  \"description\": \"{{$randomWords}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "The teacher removes course materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials/{{materialId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials",
										"{{materialId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario_3_Admin Managing Users and Banning Users",
					"item": [
						{
							"name": "Admin logs in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"token1\", jsonData.accessToken);\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response has the required field - accessToken', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"})\r",
											"\r",
											"pm.test('accessToken is a non-empty string', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
											"})\r",
											"\r",
											"pm.test('Response time is less than 200ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"})\r",
											"\r",
											"pm.test('Validate accessToken is a valid JWT token', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$/, 'Value should be a valid JWT token');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin views a list of all registered teachers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    // Parse the response JSON as an array\r",
											"    const responseArray = pm.response.json();\r",
											"    \r",
											"    // Loop through each item in the array\r",
											"    responseArray.forEach((item, index) => {\r",
											"        // Check if each item has all the properties\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"username\");\r",
											"        pm.expect(item).to.have.property(\"email\");\r",
											"        pm.expect(item).to.have.property(\"role\");\r",
											"        pm.expect(item).to.have.property(\"firstName\");\r",
											"        pm.expect(item).to.have.property(\"lastName\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 999ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
											"});\r",
											"\r",
											"const teachers = pm.response.json(); \r",
											"const randomIndex = Math.floor(Math.random() * teachers.length);\r",
											"const randomTeacher = teachers[randomIndex];\r",
											"\r",
											"// Save the ID of the random course as a collection variable\r",
											"pm.collectionVariables.set('randomTeacherId', randomTeacher.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/teachers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin selects a teacher and updates his/her data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    // Parse the response JSON as an array\r",
											"    const responseArray = pm.response.json();\r",
											"    \r",
											"    // Loop through each item in the array\r",
											"    responseArray.forEach((item, index) => {\r",
											"        // Check if each item has all the properties\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"username\");\r",
											"        pm.expect(item).to.have.property(\"email\");\r",
											"        pm.expect(item).to.have.property(\"role\");\r",
											"        pm.expect(item).to.have.property(\"firstName\");\r",
											"        pm.expect(item).to.have.property(\"lastName\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token1}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{randomTeacherId}},\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"role\": 2,\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/teachers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin bans a teacher due to rules violation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    // Parse the response JSON as an array\r",
											"    const responseArray = pm.response.json();\r",
											"    \r",
											"    // Loop through each item in the array\r",
											"    responseArray.forEach((item, index) => {\r",
											"        // Check if each item has all the properties\r",
											"        pm.expect(item).to.have.property(\"result\");\r",
											"        pm.expect(item).to.have.property(\"userId\");\r",
											"        pm.expect(item).to.have.property(\"isBanned\");\r",
											"        pm.expect(item).to.have.property(\"reason\");\r",
											"        pm.expect(item).to.have.property(\"createdBy\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reason\": \"Tried to teach students to 'speak computer' by communicating solely in emoji.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/change-user-ban?userId={{randomTeacherId}}&ban=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"change-user-ban"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{randomTeacherId}}"
										},
										{
											"key": "ban",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin reviews the list of banned users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all the properties\", () => {\r",
											"    // Parse the response JSON as an array\r",
											"    const responseArray = pm.response.json();\r",
											"    \r",
											"    // Loop through each item in the array\r",
											"    responseArray.forEach((item, index) => {\r",
											"        // Check if each item has all the properties\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"userId\");\r",
											"        pm.expect(item).to.have.property(\"reason\");\r",
											"        pm.expect(item).to.have.property(\"createdBy\");;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 999ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/banned-users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"banned-users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test-api.quantori.academy",
			"type": "string"
		},
		{
			"key": "token1",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVJZCI6MywiaWF0IjoxNjkzOTA4NzQ2LCJleHAiOjE2OTM5MTU5NDZ9.CzRan8jA-TZ4gkdUWoybfVRoVFReRcjPuLomHyGE1NM",
			"type": "string"
		},
		{
			"key": "token2",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIxODgsInJvbGVJZCI6MiwiaWF0IjoxNjkzOTI3ODgxLCJleHAiOjE2OTM5MzUwODF9.WQXKNc_ww4wGxhlj6NsK5zjjNCBd7pn_mLUxHfDFddw",
			"type": "string"
		},
		{
			"key": "token3",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIxOTAsInJvbGVJZCI6MSwiaWF0IjoxNjkzOTI3OTY3LCJleHAiOjE2OTM5MzUxNjd9.GmU_ZT5DVYQAQXICo5I5Hc6DR4A2ZDXk3kwRLeaxS0k",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "studentFirstName",
			"value": ""
		},
		{
			"key": "studentUsername",
			"value": ""
		},
		{
			"key": "teacherFirstName",
			"value": ""
		},
		{
			"key": "teacherUsername",
			"value": ""
		},
		{
			"key": "categoryID",
			"value": ""
		},
		{
			"key": "course",
			"value": ""
		},
		{
			"key": "courseID",
			"value": ""
		},
		{
			"key": "courseTitle",
			"value": ""
		},
		{
			"key": "valueLength_3",
			"value": ""
		},
		{
			"key": "valueLength_4",
			"value": ""
		},
		{
			"key": "valueLength_5",
			"value": ""
		},
		{
			"key": "valueLength_6",
			"value": ""
		},
		{
			"key": "categoryTitle",
			"value": ""
		},
		{
			"key": "randomCourseId",
			"value": ""
		},
		{
			"key": "randomCategoryId",
			"value": ""
		},
		{
			"key": "materialId",
			"value": ""
		},
		{
			"key": "randomTeacherId",
			"value": ""
		},
		{
			"key": "teacherPassword",
			"value": ""
		},
		{
			"key": "studentPassword",
			"value": ""
		}
	]
}